interface info.grisge.nispor

type BondInfo (
    slaves: []string,
    mode: []string,
    options: [string]string
)

type BridgeInfo (
    stp_state: (Disabled, KernelStp, UserStp, Unknown),
    hello_time: int,
    forward_delay: int,
    max_age: int,
    priority: int,
    slaves: []string,
    ageing_time: int,
    bridge_id: string,
    group_fwd_mask: int,
    root_id: string,
    root_port: int,
    root_path_cost: int,
    topology_change: bool,
    topology_change_detected: bool,
    hello_timer: int,
    tcn_timer: int,
    topology_change_timer: int,
    multicast_router: (Disabled, TempQuery, Perm, Temp, Unknown),
    multicast_snooping: bool,
    multicast_query_use_ifaddr: bool,
    multicast_querier: bool,
    multicast_stats_enabled: bool,
    multicast_hash_elasticity: int,
    multicast_hash_max: int,
    multicast_last_member_count: int,
    multicast_startup_query_count: int,
    multicast_last_member_interval: int,
    multicast_membership_interval: int,
    multicast_querier_interval: int,
    multicast_query_interval: int,
    multicast_query_response_interval: int,
    multicast_startup_query_interval: int,
    multicast_igmp_version: int,
    multicast_mld_version: int,
    gc_timer: int,
    group_addr: string,
    nf_call_iptables: bool,
    nf_call_ip6tables: bool,
    nf_call_arptables: bool,
    vlan_filtering: bool,
    vlan_protocol: (802.1Q, 802.1AD),
    ?default_pvid: int,
)

type BridgeVlanEntry (
    ?vid: int,
    ?vid_range: []int,
    is_pvid: bool,
    is_egress_untagged: bool,
)

type BridgePortInfo (
    stp_state: (Disabled, Listening, Learning, Forwarding, Blocking, Unknown),
    stp_priority: int,
    stp_path_cost: int,
    hairpin_mode: bool,
    bpdu_guard: bool,
    root_block: bool,
    multicast_fast_leave: bool,
    learning: bool,
    unicast_flood: bool,
    proxyarp: bool,
    proxyarp_wifi: bool,
    designated_root: string,
    designated_bridge: string,
    designated_port: int,
    designated_cost: int,
    port_id: string,
    port_no: string,
    change_ack: bool,
    config_pending: bool,
    message_age_timer: int,
    forward_delay_timer: int,
    hold_timer: int,
    multicast_router: (Disabled, TempQuery, Perm, Temp, Unknown),
    multicast_flood: bool,
    multicast_to_unicast: bool,
    vlan_tunnel: bool,
    broadcast_flood: bool,
    group_fwd_mask: int,
    neigh_suppress: bool,
    isolated: bool,
    ?backup_port: string,
    ?vlans: []BridgeVlanEntry,
)

type Ipv4Info (
    addresses: []Ipv4AddrInfo
)

type Ipv4AddrInfo (
    address: string,
    prefix_len: int,
    ?peer: string,
    valid_lft: string,
    preferred_lft: string
)

type Ipv6Info (
    addresses: []Ipv6AddrInfo
)

type Ipv6AddrInfo (
    address: string,
    prefix_len: int,
    valid_lft: string,
    preferred_lft: string
)

type VlanInfo (
    vlan_id: int,
    protocol: (802.1Q, 802.1AD, Unknown),
    base_iface: string,
    is_reorder_hdr: bool,
    is_gvrp: bool,
    is_loose_binding: bool,
    is_mvrp: bool,
    is_bridge_binding: bool,
)

type Iface (
    name: string,
    iface_type: string,
    state: (Up, Down, Unknown),
    mtu: int,
    ?bond: BondInfo,
    ?bond_slave: [string]string,
    ?bridge: BridgeInfo,
    ?bridge_port: BridgePortInfo,
    ?vlan: VlanInfo,
    ?master: string,
    ?master_type: (Bond, Unknown),
    ?ipv4: Ipv4Info,
    ?ipv6: Ipv6Info
)

type NetState (
    ifaces: [string]Iface
)

method Get() -> (net_state: NetState)

error InternalError(msg: string)
